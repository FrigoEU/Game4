//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.0
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""2c1c954d-05e3-4931-b6f0-e2088922b95c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""207117f5-361a-4099-a497-031b5d56dc92"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""2ed40fbd-8d86-4897-bab4-188d40993903"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""PetMove1"",
                    ""type"": ""Button"",
                    ""id"": ""d6beea22-dc28-4e58-b094-d377c1093e18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""PetMove2"",
                    ""type"": ""Button"",
                    ""id"": ""be849cb5-72de-40d4-bd05-3d4d3d187b18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""PetMove3"",
                    ""type"": ""Button"",
                    ""id"": ""ecbcbdcd-46ba-415e-ad21-b0f9fb43761e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""PetMove4"",
                    ""type"": ""Button"",
                    ""id"": ""1677a37e-2c57-46fb-9e07-85e001495a73"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ad6d3c10-f912-467f-b467-4dfd0742d21f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7f56adf1-97b8-4d1f-b146-d655b6293f6b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d3e38cc2-6eca-46cd-978c-ff46ac3b8be0"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0df96d49-8ff2-4b6e-8bc3-a8a3ea1d2e62"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d43ee72d-efb1-4bca-a279-140db522999a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3b3c9c12-c9ef-4415-8b85-357617cb74bf"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68948108-61a9-40c4-b53b-d5634147f15c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""PetMove1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c05a7104-1682-45e1-9cd8-42b8a6da5091"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""PetMove2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""991b33b8-26cd-4ebb-85c7-7fd179ee0719"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""PetMove3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e878398-eb09-4563-a5c5-70d2fff98830"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""PetMove4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Attack = m_Player.FindAction("Attack", throwIfNotFound: true);
        m_Player_PetMove1 = m_Player.FindAction("PetMove1", throwIfNotFound: true);
        m_Player_PetMove2 = m_Player.FindAction("PetMove2", throwIfNotFound: true);
        m_Player_PetMove3 = m_Player.FindAction("PetMove3", throwIfNotFound: true);
        m_Player_PetMove4 = m_Player.FindAction("PetMove4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Attack;
    private readonly InputAction m_Player_PetMove1;
    private readonly InputAction m_Player_PetMove2;
    private readonly InputAction m_Player_PetMove3;
    private readonly InputAction m_Player_PetMove4;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Attack => m_Wrapper.m_Player_Attack;
        public InputAction @PetMove1 => m_Wrapper.m_Player_PetMove1;
        public InputAction @PetMove2 => m_Wrapper.m_Player_PetMove2;
        public InputAction @PetMove3 => m_Wrapper.m_Player_PetMove3;
        public InputAction @PetMove4 => m_Wrapper.m_Player_PetMove4;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Attack.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @PetMove1.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPetMove1;
                @PetMove1.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPetMove1;
                @PetMove1.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPetMove1;
                @PetMove2.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPetMove2;
                @PetMove2.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPetMove2;
                @PetMove2.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPetMove2;
                @PetMove3.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPetMove3;
                @PetMove3.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPetMove3;
                @PetMove3.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPetMove3;
                @PetMove4.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPetMove4;
                @PetMove4.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPetMove4;
                @PetMove4.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPetMove4;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @PetMove1.started += instance.OnPetMove1;
                @PetMove1.performed += instance.OnPetMove1;
                @PetMove1.canceled += instance.OnPetMove1;
                @PetMove2.started += instance.OnPetMove2;
                @PetMove2.performed += instance.OnPetMove2;
                @PetMove2.canceled += instance.OnPetMove2;
                @PetMove3.started += instance.OnPetMove3;
                @PetMove3.performed += instance.OnPetMove3;
                @PetMove3.canceled += instance.OnPetMove3;
                @PetMove4.started += instance.OnPetMove4;
                @PetMove4.performed += instance.OnPetMove4;
                @PetMove4.canceled += instance.OnPetMove4;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnPetMove1(InputAction.CallbackContext context);
        void OnPetMove2(InputAction.CallbackContext context);
        void OnPetMove3(InputAction.CallbackContext context);
        void OnPetMove4(InputAction.CallbackContext context);
    }
}
